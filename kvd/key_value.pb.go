// Code generated by protoc-gen-go. DO NOT EDIT.
// source: key_value.proto

package key_value

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A key-value pair.
type Record struct {
	// The key identifying the pair.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The string value of the pari.
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_40f3a6d8264e424e, []int{0}
}

func (m *Record) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Record.Unmarshal(m, b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Record.Marshal(b, m, deterministic)
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return xxx_messageInfo_Record.Size(m)
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Record) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// A request for the value associated with a given key.
type GetRecordRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRecordRequest) Reset()         { *m = GetRecordRequest{} }
func (m *GetRecordRequest) String() string { return proto.CompactTextString(m) }
func (*GetRecordRequest) ProtoMessage()    {}
func (*GetRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40f3a6d8264e424e, []int{1}
}

func (m *GetRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRecordRequest.Unmarshal(m, b)
}
func (m *GetRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRecordRequest.Marshal(b, m, deterministic)
}
func (m *GetRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRecordRequest.Merge(m, src)
}
func (m *GetRecordRequest) XXX_Size() int {
	return xxx_messageInfo_GetRecordRequest.Size(m)
}
func (m *GetRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRecordRequest proto.InternalMessageInfo

func (m *GetRecordRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A request to create a new record.
type CreateRecordRequest struct {
	// The Record to create.
	Record               *Record  `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRecordRequest) Reset()         { *m = CreateRecordRequest{} }
func (m *CreateRecordRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRecordRequest) ProtoMessage()    {}
func (*CreateRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40f3a6d8264e424e, []int{2}
}

func (m *CreateRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRecordRequest.Unmarshal(m, b)
}
func (m *CreateRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRecordRequest.Marshal(b, m, deterministic)
}
func (m *CreateRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRecordRequest.Merge(m, src)
}
func (m *CreateRecordRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRecordRequest.Size(m)
}
func (m *CreateRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRecordRequest proto.InternalMessageInfo

func (m *CreateRecordRequest) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

// A request to update an existing record.
type UpdateRecordRequest struct {
	// The record to update.
	Record               *Record  `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRecordRequest) Reset()         { *m = UpdateRecordRequest{} }
func (m *UpdateRecordRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRecordRequest) ProtoMessage()    {}
func (*UpdateRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40f3a6d8264e424e, []int{3}
}

func (m *UpdateRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRecordRequest.Unmarshal(m, b)
}
func (m *UpdateRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRecordRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRecordRequest.Merge(m, src)
}
func (m *UpdateRecordRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRecordRequest.Size(m)
}
func (m *UpdateRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRecordRequest proto.InternalMessageInfo

func (m *UpdateRecordRequest) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

// A request to watch an existing record for updates.
type WatchRecordRequest struct {
	// The name of the record to watch.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchRecordRequest) Reset()         { *m = WatchRecordRequest{} }
func (m *WatchRecordRequest) String() string { return proto.CompactTextString(m) }
func (*WatchRecordRequest) ProtoMessage()    {}
func (*WatchRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40f3a6d8264e424e, []int{4}
}

func (m *WatchRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchRecordRequest.Unmarshal(m, b)
}
func (m *WatchRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchRecordRequest.Marshal(b, m, deterministic)
}
func (m *WatchRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchRecordRequest.Merge(m, src)
}
func (m *WatchRecordRequest) XXX_Size() int {
	return xxx_messageInfo_WatchRecordRequest.Size(m)
}
func (m *WatchRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchRecordRequest proto.InternalMessageInfo

func (m *WatchRecordRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Record)(nil), "key_value.Record")
	proto.RegisterType((*GetRecordRequest)(nil), "key_value.GetRecordRequest")
	proto.RegisterType((*CreateRecordRequest)(nil), "key_value.CreateRecordRequest")
	proto.RegisterType((*UpdateRecordRequest)(nil), "key_value.UpdateRecordRequest")
	proto.RegisterType((*WatchRecordRequest)(nil), "key_value.WatchRecordRequest")
}

func init() { proto.RegisterFile("key_value.proto", fileDescriptor_40f3a6d8264e424e) }

var fileDescriptor_40f3a6d8264e424e = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x4e, 0xad, 0x8c,
	0x2f, 0x4b, 0xcc, 0x29, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x19, 0x71, 0xb1, 0x05, 0xa5, 0x26, 0xe7, 0x17, 0xa5, 0x08, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6,
	0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x42, 0x22, 0x5c, 0xac, 0x60, 0x65,
	0x12, 0x4c, 0x60, 0x41, 0x08, 0x47, 0x49, 0x8d, 0x4b, 0xc0, 0x3d, 0xb5, 0x04, 0xa2, 0x2d, 0x28,
	0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x04, 0x9b, 0x6e, 0x25, 0x07, 0x2e, 0x61, 0xe7, 0xa2, 0xd4, 0xc4,
	0x92, 0x54, 0x54, 0xa5, 0x9a, 0x5c, 0x6c, 0x45, 0x60, 0x01, 0xb0, 0x62, 0x6e, 0x23, 0x41, 0x3d,
	0x84, 0xfb, 0xa0, 0x2a, 0xa1, 0x0a, 0x40, 0x26, 0x84, 0x16, 0xa4, 0x50, 0x62, 0x82, 0x06, 0x97,
	0x50, 0x78, 0x62, 0x49, 0x72, 0x06, 0x41, 0xd7, 0x1a, 0xcd, 0x65, 0xe2, 0xe2, 0xf5, 0x4e, 0xad,
	0x0c, 0x03, 0x99, 0x12, 0x5c, 0x92, 0x5f, 0x94, 0x2a, 0x64, 0xcb, 0xc5, 0x09, 0xf7, 0xa7, 0x90,
	0x34, 0x92, 0x1d, 0xe8, 0xbe, 0x97, 0xc2, 0x74, 0x80, 0x12, 0x83, 0x90, 0x33, 0x17, 0x0f, 0xb2,
	0xf7, 0x85, 0xe4, 0x90, 0x14, 0x61, 0x09, 0x17, 0x9c, 0x86, 0x20, 0x87, 0x00, 0x8a, 0x21, 0x58,
	0x82, 0x06, 0x97, 0x21, 0xdc, 0x48, 0x81, 0x20, 0x24, 0x8b, 0xa4, 0x06, 0x33, 0x70, 0xb0, 0x1a,
	0x61, 0xc0, 0x98, 0xc4, 0x06, 0x4e, 0x3b, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xe1,
	0xa2, 0x37, 0x4e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KeyValueStoreClient is the client API for KeyValueStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyValueStoreClient interface {
	// Look up the value associated with a given key.
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*Record, error)
	// Associate a value with a given key.
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*Record, error)
	// Update the value associated with a given key.
	UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*Record, error)
	// Watch the requested record for updates.
	WatchRecord(ctx context.Context, in *WatchRecordRequest, opts ...grpc.CallOption) (KeyValueStore_WatchRecordClient, error)
}

type keyValueStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyValueStoreClient(cc grpc.ClientConnInterface) KeyValueStoreClient {
	return &keyValueStoreClient{cc}
}

func (c *keyValueStoreClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := c.cc.Invoke(ctx, "/key_value.KeyValueStore/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := c.cc.Invoke(ctx, "/key_value.KeyValueStore/CreateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := c.cc.Invoke(ctx, "/key_value.KeyValueStore/UpdateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) WatchRecord(ctx context.Context, in *WatchRecordRequest, opts ...grpc.CallOption) (KeyValueStore_WatchRecordClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KeyValueStore_serviceDesc.Streams[0], "/key_value.KeyValueStore/WatchRecord", opts...)
	if err != nil {
		return nil, err
	}
	x := &keyValueStoreWatchRecordClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KeyValueStore_WatchRecordClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type keyValueStoreWatchRecordClient struct {
	grpc.ClientStream
}

func (x *keyValueStoreWatchRecordClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KeyValueStoreServer is the server API for KeyValueStore service.
type KeyValueStoreServer interface {
	// Look up the value associated with a given key.
	GetRecord(context.Context, *GetRecordRequest) (*Record, error)
	// Associate a value with a given key.
	CreateRecord(context.Context, *CreateRecordRequest) (*Record, error)
	// Update the value associated with a given key.
	UpdateRecord(context.Context, *UpdateRecordRequest) (*Record, error)
	// Watch the requested record for updates.
	WatchRecord(*WatchRecordRequest, KeyValueStore_WatchRecordServer) error
}

// UnimplementedKeyValueStoreServer can be embedded to have forward compatible implementations.
type UnimplementedKeyValueStoreServer struct {
}

func (*UnimplementedKeyValueStoreServer) GetRecord(ctx context.Context, req *GetRecordRequest) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (*UnimplementedKeyValueStoreServer) CreateRecord(ctx context.Context, req *CreateRecordRequest) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (*UnimplementedKeyValueStoreServer) UpdateRecord(ctx context.Context, req *UpdateRecordRequest) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecord not implemented")
}
func (*UnimplementedKeyValueStoreServer) WatchRecord(req *WatchRecordRequest, srv KeyValueStore_WatchRecordServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchRecord not implemented")
}

func RegisterKeyValueStoreServer(s *grpc.Server, srv KeyValueStoreServer) {
	s.RegisterService(&_KeyValueStore_serviceDesc, srv)
}

func _KeyValueStore_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/key_value.KeyValueStore/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/key_value.KeyValueStore/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_UpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).UpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/key_value.KeyValueStore/UpdateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).UpdateRecord(ctx, req.(*UpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_WatchRecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRecordRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeyValueStoreServer).WatchRecord(m, &keyValueStoreWatchRecordServer{stream})
}

type KeyValueStore_WatchRecordServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type keyValueStoreWatchRecordServer struct {
	grpc.ServerStream
}

func (x *keyValueStoreWatchRecordServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

var _KeyValueStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "key_value.KeyValueStore",
	HandlerType: (*KeyValueStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecord",
			Handler:    _KeyValueStore_GetRecord_Handler,
		},
		{
			MethodName: "CreateRecord",
			Handler:    _KeyValueStore_CreateRecord_Handler,
		},
		{
			MethodName: "UpdateRecord",
			Handler:    _KeyValueStore_UpdateRecord_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchRecord",
			Handler:       _KeyValueStore_WatchRecord_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "key_value.proto",
}
